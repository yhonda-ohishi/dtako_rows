// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: dtako_rows.proto

package dtako_rows

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DtakoRowsService_GetMonthlyFuelConsumption_FullMethodName = "/dtako_rows.DtakoRowsService/GetMonthlyFuelConsumption"
	DtakoRowsService_GetVehicleMonthlySummary_FullMethodName  = "/dtako_rows.DtakoRowsService/GetVehicleMonthlySummary"
	DtakoRowsService_GetDailySummary_FullMethodName           = "/dtako_rows.DtakoRowsService/GetDailySummary"
	DtakoRowsService_ExportMonthlyFuelCSV_FullMethodName      = "/dtako_rows.DtakoRowsService/ExportMonthlyFuelCSV"
	DtakoRowsService_GetRow_FullMethodName                    = "/dtako_rows.DtakoRowsService/GetRow"
	DtakoRowsService_ListRows_FullMethodName                  = "/dtako_rows.DtakoRowsService/ListRows"
)

// DtakoRowsServiceClient is the client API for DtakoRowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DtakoRowsService - 運行データ集計サービス
type DtakoRowsServiceClient interface {
	// 車両ごとの月次給油量集計
	GetMonthlyFuelConsumption(ctx context.Context, in *GetMonthlyFuelConsumptionRequest, opts ...grpc.CallOption) (*MonthlyFuelConsumptionResponse, error)
	// 全車両の月次サマリー取得
	GetVehicleMonthlySummary(ctx context.Context, in *GetVehicleMonthlySummaryRequest, opts ...grpc.CallOption) (*VehicleMonthlySummaryResponse, error)
	// 日次サマリー取得
	GetDailySummary(ctx context.Context, in *GetDailySummaryRequest, opts ...grpc.CallOption) (*DailySummaryResponse, error)
	// CSV形式でエクスポート
	ExportMonthlyFuelCSV(ctx context.Context, in *GetMonthlyFuelConsumptionRequest, opts ...grpc.CallOption) (*ExportCSVResponse, error)
	// 運行データ取得（db_serviceプロキシ）
	GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*RowResponse, error)
	// 運行データ一覧取得（db_serviceプロキシ）
	ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
}

type dtakoRowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDtakoRowsServiceClient(cc grpc.ClientConnInterface) DtakoRowsServiceClient {
	return &dtakoRowsServiceClient{cc}
}

func (c *dtakoRowsServiceClient) GetMonthlyFuelConsumption(ctx context.Context, in *GetMonthlyFuelConsumptionRequest, opts ...grpc.CallOption) (*MonthlyFuelConsumptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthlyFuelConsumptionResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_GetMonthlyFuelConsumption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) GetVehicleMonthlySummary(ctx context.Context, in *GetVehicleMonthlySummaryRequest, opts ...grpc.CallOption) (*VehicleMonthlySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehicleMonthlySummaryResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_GetVehicleMonthlySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) GetDailySummary(ctx context.Context, in *GetDailySummaryRequest, opts ...grpc.CallOption) (*DailySummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailySummaryResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_GetDailySummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) ExportMonthlyFuelCSV(ctx context.Context, in *GetMonthlyFuelConsumptionRequest, opts ...grpc.CallOption) (*ExportCSVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportCSVResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_ExportMonthlyFuelCSV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*RowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RowResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_GetRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_ListRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtakoRowsServiceServer is the server API for DtakoRowsService service.
// All implementations must embed UnimplementedDtakoRowsServiceServer
// for forward compatibility.
//
// DtakoRowsService - 運行データ集計サービス
type DtakoRowsServiceServer interface {
	// 車両ごとの月次給油量集計
	GetMonthlyFuelConsumption(context.Context, *GetMonthlyFuelConsumptionRequest) (*MonthlyFuelConsumptionResponse, error)
	// 全車両の月次サマリー取得
	GetVehicleMonthlySummary(context.Context, *GetVehicleMonthlySummaryRequest) (*VehicleMonthlySummaryResponse, error)
	// 日次サマリー取得
	GetDailySummary(context.Context, *GetDailySummaryRequest) (*DailySummaryResponse, error)
	// CSV形式でエクスポート
	ExportMonthlyFuelCSV(context.Context, *GetMonthlyFuelConsumptionRequest) (*ExportCSVResponse, error)
	// 運行データ取得（db_serviceプロキシ）
	GetRow(context.Context, *GetRowRequest) (*RowResponse, error)
	// 運行データ一覧取得（db_serviceプロキシ）
	ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error)
	mustEmbedUnimplementedDtakoRowsServiceServer()
}

// UnimplementedDtakoRowsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDtakoRowsServiceServer struct{}

func (UnimplementedDtakoRowsServiceServer) GetMonthlyFuelConsumption(context.Context, *GetMonthlyFuelConsumptionRequest) (*MonthlyFuelConsumptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonthlyFuelConsumption not implemented")
}
func (UnimplementedDtakoRowsServiceServer) GetVehicleMonthlySummary(context.Context, *GetVehicleMonthlySummaryRequest) (*VehicleMonthlySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicleMonthlySummary not implemented")
}
func (UnimplementedDtakoRowsServiceServer) GetDailySummary(context.Context, *GetDailySummaryRequest) (*DailySummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailySummary not implemented")
}
func (UnimplementedDtakoRowsServiceServer) ExportMonthlyFuelCSV(context.Context, *GetMonthlyFuelConsumptionRequest) (*ExportCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMonthlyFuelCSV not implemented")
}
func (UnimplementedDtakoRowsServiceServer) GetRow(context.Context, *GetRowRequest) (*RowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRow not implemented")
}
func (UnimplementedDtakoRowsServiceServer) ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRows not implemented")
}
func (UnimplementedDtakoRowsServiceServer) mustEmbedUnimplementedDtakoRowsServiceServer() {}
func (UnimplementedDtakoRowsServiceServer) testEmbeddedByValue()                          {}

// UnsafeDtakoRowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtakoRowsServiceServer will
// result in compilation errors.
type UnsafeDtakoRowsServiceServer interface {
	mustEmbedUnimplementedDtakoRowsServiceServer()
}

func RegisterDtakoRowsServiceServer(s grpc.ServiceRegistrar, srv DtakoRowsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDtakoRowsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DtakoRowsService_ServiceDesc, srv)
}

func _DtakoRowsService_GetMonthlyFuelConsumption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyFuelConsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).GetMonthlyFuelConsumption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_GetMonthlyFuelConsumption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).GetMonthlyFuelConsumption(ctx, req.(*GetMonthlyFuelConsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_GetVehicleMonthlySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleMonthlySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).GetVehicleMonthlySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_GetVehicleMonthlySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).GetVehicleMonthlySummary(ctx, req.(*GetVehicleMonthlySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_GetDailySummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailySummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).GetDailySummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_GetDailySummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).GetDailySummary(ctx, req.(*GetDailySummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_ExportMonthlyFuelCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonthlyFuelConsumptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).ExportMonthlyFuelCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_ExportMonthlyFuelCSV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).ExportMonthlyFuelCSV(ctx, req.(*GetMonthlyFuelConsumptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_GetRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).GetRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_GetRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).GetRow(ctx, req.(*GetRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_ListRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).ListRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_ListRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).ListRows(ctx, req.(*ListRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DtakoRowsService_ServiceDesc is the grpc.ServiceDesc for DtakoRowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DtakoRowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtako_rows.DtakoRowsService",
	HandlerType: (*DtakoRowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMonthlyFuelConsumption",
			Handler:    _DtakoRowsService_GetMonthlyFuelConsumption_Handler,
		},
		{
			MethodName: "GetVehicleMonthlySummary",
			Handler:    _DtakoRowsService_GetVehicleMonthlySummary_Handler,
		},
		{
			MethodName: "GetDailySummary",
			Handler:    _DtakoRowsService_GetDailySummary_Handler,
		},
		{
			MethodName: "ExportMonthlyFuelCSV",
			Handler:    _DtakoRowsService_ExportMonthlyFuelCSV_Handler,
		},
		{
			MethodName: "GetRow",
			Handler:    _DtakoRowsService_GetRow_Handler,
		},
		{
			MethodName: "ListRows",
			Handler:    _DtakoRowsService_ListRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dtako_rows.proto",
}
