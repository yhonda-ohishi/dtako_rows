// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/dtako_rows.proto

package dtako_rows

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DtakoRowsService_GetRow_FullMethodName     = "/dtako_rows.DtakoRowsService/GetRow"
	DtakoRowsService_ListRows_FullMethodName   = "/dtako_rows.DtakoRowsService/ListRows"
	DtakoRowsService_SearchRows_FullMethodName = "/dtako_rows.DtakoRowsService/SearchRows"
)

// DtakoRowsServiceClient is the client API for DtakoRowsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// DtakoRowsサービス - 運行データの管理（読み取り専用）
type DtakoRowsServiceClient interface {
	// 運行データ取得
	GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*GetRowResponse, error)
	// 運行データ一覧取得
	ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
	// 検索
	SearchRows(ctx context.Context, in *SearchRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error)
}

type dtakoRowsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDtakoRowsServiceClient(cc grpc.ClientConnInterface) DtakoRowsServiceClient {
	return &dtakoRowsServiceClient{cc}
}

func (c *dtakoRowsServiceClient) GetRow(ctx context.Context, in *GetRowRequest, opts ...grpc.CallOption) (*GetRowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRowResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_GetRow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) ListRows(ctx context.Context, in *ListRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_ListRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dtakoRowsServiceClient) SearchRows(ctx context.Context, in *SearchRowsRequest, opts ...grpc.CallOption) (*ListRowsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRowsResponse)
	err := c.cc.Invoke(ctx, DtakoRowsService_SearchRows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DtakoRowsServiceServer is the server API for DtakoRowsService service.
// All implementations must embed UnimplementedDtakoRowsServiceServer
// for forward compatibility.
//
// DtakoRowsサービス - 運行データの管理（読み取り専用）
type DtakoRowsServiceServer interface {
	// 運行データ取得
	GetRow(context.Context, *GetRowRequest) (*GetRowResponse, error)
	// 運行データ一覧取得
	ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error)
	// 検索
	SearchRows(context.Context, *SearchRowsRequest) (*ListRowsResponse, error)
	mustEmbedUnimplementedDtakoRowsServiceServer()
}

// UnimplementedDtakoRowsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDtakoRowsServiceServer struct{}

func (UnimplementedDtakoRowsServiceServer) GetRow(context.Context, *GetRowRequest) (*GetRowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRow not implemented")
}
func (UnimplementedDtakoRowsServiceServer) ListRows(context.Context, *ListRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRows not implemented")
}
func (UnimplementedDtakoRowsServiceServer) SearchRows(context.Context, *SearchRowsRequest) (*ListRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRows not implemented")
}
func (UnimplementedDtakoRowsServiceServer) mustEmbedUnimplementedDtakoRowsServiceServer() {}
func (UnimplementedDtakoRowsServiceServer) testEmbeddedByValue()                          {}

// UnsafeDtakoRowsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DtakoRowsServiceServer will
// result in compilation errors.
type UnsafeDtakoRowsServiceServer interface {
	mustEmbedUnimplementedDtakoRowsServiceServer()
}

func RegisterDtakoRowsServiceServer(s grpc.ServiceRegistrar, srv DtakoRowsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDtakoRowsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DtakoRowsService_ServiceDesc, srv)
}

func _DtakoRowsService_GetRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).GetRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_GetRow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).GetRow(ctx, req.(*GetRowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_ListRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).ListRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_ListRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).ListRows(ctx, req.(*ListRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DtakoRowsService_SearchRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DtakoRowsServiceServer).SearchRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DtakoRowsService_SearchRows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DtakoRowsServiceServer).SearchRows(ctx, req.(*SearchRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DtakoRowsService_ServiceDesc is the grpc.ServiceDesc for DtakoRowsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DtakoRowsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dtako_rows.DtakoRowsService",
	HandlerType: (*DtakoRowsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRow",
			Handler:    _DtakoRowsService_GetRow_Handler,
		},
		{
			MethodName: "ListRows",
			Handler:    _DtakoRowsService_ListRows_Handler,
		},
		{
			MethodName: "SearchRows",
			Handler:    _DtakoRowsService_SearchRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dtako_rows.proto",
}
